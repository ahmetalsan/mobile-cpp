// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from restclient.djinni

#include "NativeInstance.hpp"  // my header
#include "Marshal.hpp"
#include "NativeHandshakeRecord.hpp"

namespace djinni_generated {

NativeInstance::NativeInstance() : ::djinni::JniInterface<::restclient::Instance, NativeInstance>("com/cortex/restclient/Instance$CppProxy") {}

NativeInstance::~NativeInstance() = default;


CJNIEXPORT void JNICALL Java_com_cortex_restclient_Instance_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::restclient::Instance>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_cortex_restclient_Instance_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::restclient::Instance::create();
        return ::djinni::release(::djinni_generated::NativeInstance::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_cortex_restclient_Instance_00024CppProxy_native_1handshake(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_udId, jstring j_appVersion, jstring j_osVersion, jstring j_osType)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::restclient::Instance>(nativeRef);
        auto r = ref->handshake(::djinni::String::toCpp(jniEnv, j_udId),
                                ::djinni::String::toCpp(jniEnv, j_appVersion),
                                ::djinni::String::toCpp(jniEnv, j_osVersion),
                                ::djinni::String::toCpp(jniEnv, j_osType));
        return ::djinni::release(::djinni_generated::NativeHandshakeRecord::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
